name: NanoPi R2S OpenWrt

on:
  watch:
    types: started
  
  repository_dispatch:
  workflow_dispatch:
  
  schedule: 
    - cron: '5 15 * * 0' 

jobs:
  OpenWrt-18_06:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Init Building Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E rm -rf /etc/apt/sources.list.d
        sudo -E apt-get update -y
        sudo -E apt-get install -y build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons
        wget -qO - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | sed 's/python-/python3-/g' | /bin/bash
        sudo -E apt-get clean -y
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
    - name: Clone Source
      run: |
        cd "/home/runner"
        git clone --branch "openwrt-18.06-k5.4" --single-branch "https://github.com/immortalwrt/immortalwrt.git" "openwrt"
        sudo chown -R runner:runner "openwrt"
        cd "/home/runner/openwrt"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        patch -p1 < "${GITHUB_WORKSPACE}/patches/1806-modify_for_r2s.patch"
    - name: Build OpenWrt-18.06
      run: |
        cd "/home/runner/openwrt"
        cp -f "${GITHUB_WORKSPACE}/configs/1806-config.seed" ".config"
        make defconfig
        make -j$[$(nproc)+1]
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-ext4-sysupgrade.img.gz" "../openwrt-18.06-rockchip-armv8-friendlyarm_nanopi-r2s-ext4-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz" "../openwrt-18.06-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/sha256sums" "../openwrt-18.06-sha256sums"
    - name: Rebuild OpenWrt-18.06 to Collect Error Log
      if: failure()
      run: |
        cd "/home/runner/openwrt"
        make -j1 V=s
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-ext4-sysupgrade.img.gz" "../openwrt-18.06-rockchip-armv8-friendlyarm_nanopi-r2s-ext4-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz" "../openwrt-18.06-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz"
        mv -f "bin/targets/rockchip/armv8/sha256sums" "../openwrt-18.06-sha256sums"
    - name: Upload OpenWrt-Snapshot EXT4 Firmware
      uses: actions/upload-artifact@v2
      with:
        name: openwrt-18.06-rockchip-armv8-friendlyarm_nanopi-r2s-ext4-sysupgrade.img.gz
        path: /home/runner/openwrt-18.06-rockchip-armv8-friendlyarm_nanopi-r2s-ext4-sysupgrade.img.gz
        
    - name: Assemble Artifact
      id: assemble_artifact
      run: |
        cd "/home/runner"
        rm -rf ./artifact/
        mkdir -p ./artifact/
        cp openwrt-18.06-rockchip-armv8-friendlyarm_nanopi-r2s-ext4-sysupgrade.img.gz ./artifact/
        zip -r artifact.zip ./artifact/
        release_tag="R2S-$(date +%Y-%m-%d)"
        echo "##[set-output name=release_tag;]$release_tag"
    
    - name: Upload Artifact
      uses: actions/upload-artifact@main
      with:
        name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM
        path: /home/runner/artifact.zip
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@main
      env:
        GITHUB_TOKEN: ${{ secrets.workflow_token }}
      with:
        tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
        release_name: 自动发布 ${{ steps.assemble_artifact.outputs.release_tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.workflow_token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: /home/runner/artifact.zip
        asset_name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM.zip
        asset_content_type: application/zip
        
  Cleanup-Old-Artifacts:
    needs: [OpenWrt-18_06]
    runs-on: ubuntu-18.04
    steps:
    - name: Cleanup Old Action Artifacts
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ github.token }}
        expire-in: 7d
  Cleanup-Workflow-Runs:
    needs: Cleanup-Old-Artifacts
    runs-on: ubuntu-18.04
    steps:
      - name: Cleanup Workflow Runs
        uses: GitRML/delete-workflow-runs@v1.2.1
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 7
